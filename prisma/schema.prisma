generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // with pooling
  directUrl = env("DIRECT_URL") // no pooling, used for migrations
  relationMode = "prisma"
}

model Profile {
  //Core
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  
  //Relations
  servers Server[]
  members Member[]
  channels Channel[]

  //Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  //Core
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  //Profile
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  //Relations
  members Member[]
  channels Channel[]

  //Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  //Core
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  //Profile
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  //Server
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  //Remetente
  conversationsInitiated Conversation[] @relation("MemberOne")
  //Destinat√°rio
  conversationsReceived Conversation[] @relation("MemberTwo")

  //Mensagens
  messages Message[]

  //Mensagens Diretas
  directMessages DirectMessage[]

  //Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Channel {
  //Core
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  //Profile
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  //Server
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  //Mensagens
  messages Message[]

  //Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  //Core
  id String @id @default(uuid())
  content String @db.Text
  //Optional
  fileUrl String? @db.Text
  fileName String? @db.Text

  //Member
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  //Channel
  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  //Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Indexes
  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  //Core  
  id String @id @default(uuid())

  //Primeiro Participante
  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  //Segundo Participante
  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  //Mensagens
  messages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  //Core
  id String @id @default(uuid())
  content String @db.Text
  //Optional
  fileUrl String? @db.Text
  fileName String? @db.Text

  //Member
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  //Conversation
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  //Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  //Indexes
  @@index([memberId])
  @@index([conversationId])
}